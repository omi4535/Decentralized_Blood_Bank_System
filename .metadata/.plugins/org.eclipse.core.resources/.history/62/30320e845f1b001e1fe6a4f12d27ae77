package com.blood_bank_system.DAO;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import com.blood_bank_system.tables.inventory;

public class inventoryDAO {
	private static String jdbcURL = "jdbc:mysql://localhost:3306/blood_bank";
	private static String jdbcUsername = "root";
	private static String jdbcPassword = "12345";
	
	public int getInventoryID(int bloodBankID, int bloodGroupID) {
	    int inventoryID = 0;
	    try {
	    	
	    	Connection connection =getConnection();
	    	String sql = "SELECT inventory_id FROM blood_inventory WHERE blood_bank_id = ? AND blood_group_id = ?";
		     
			PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
					
	          statement.setInt(1, bloodBankID);
	        statement.setInt(2, bloodGroupID);
	        
	        // Execute the query
	        ResultSet resultSet = statement.executeQuery();
	        
	        // Check if a result is found and retrieve the inventory ID
	        if (resultSet.next()) {
	            inventoryID = resultSet.getInt("inventory_id");
	        }
	        
	        // Close the resources
	        resultSet.close();
	        statement.close();
	        connection.close();
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    return inventoryID;
	}
	
	
	
	public void updateBloodInventory(int inventoryID, int availableUnits, Date lastUpdatedDate) {
	    try {
	    	
	    	Connection connection = getConnection();
	        // Prepare the SQL statement
	        String sql = "UPDATE blood_inventory SET available_units = ?, last_updated_date = ? WHERE inventory_id = ?";
	        PreparedStatement statement = connection.prepareStatement(sql);
	        statement.setInt(1, availableUnits);
	        statement.setDate(2, new java.sql.Date(lastUpdatedDate.getTime()));
	        statement.setInt(3, inventoryID);
	        
	        // Execute the update
	        int rowsAffected = statement.executeUpdate();
	        
	        // Check if the update was successful
	        if (rowsAffected > 0) {
	            System.out.println("Blood Inventory updated successfully.");
	        } else {
	            System.out.println("Failed to update Blood Inventory.");
	        }
	        
	        // Close the resources
	        statement.close();
	        connection.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	}

	
	
    
    
    public boolean addInventory(inventory inventory) {
    	boolean suc=false;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = getConnection();
            // Retrieve the group ID from the blood group table based on the selected blood group
            String bloodGroup = inventory.getBloodGroup();
            String selectGroupIdQuery = "SELECT group_id FROM blood_groups WHERE group_name = ?";
            stmt = conn.prepareStatement(selectGroupIdQuery);
            stmt.setString(1, bloodGroup);
            rs = stmt.executeQuery();

            int groupId = 0;
            if (rs.next()) {
                groupId = rs.getInt("group_id");
            }

            // Insert the inventory details into the inventory table
            String insertQuery = "INSERT INTO blood_inventory (group_id, available_units, last_updated_date, storage_location) VALUES (?, ?, ?, ?)";
            stmt = conn.prepareStatement(insertQuery);
            stmt.setInt(1, groupId);
            stmt.setInt(2, inventory.getAvailableUnits());
            stmt.setDate(3, inventory.getLastUpdatedDate());
            stmt.setString(4, inventory.getStorageLocation());

            stmt.executeUpdate();
            suc=true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
          
        }
        return suc;
    }

    
    
    public static Connection getConnection() throws SQLException {
        Connection conn = null;
        try {
            // Load the MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            // Create the database connection
            conn = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return conn;
    }
    

}
