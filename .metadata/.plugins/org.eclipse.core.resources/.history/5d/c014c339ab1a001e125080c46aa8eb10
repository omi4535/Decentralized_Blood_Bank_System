package com.blood_bank_system.DAO;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class inventoryDAO {
	private static String jdbcURL = "jdbc:mysql://localhost:3306/blood_bank";
	private static String jdbcUsername = "root";
	private static String jdbcPassword = "12345";
	
	public int getInventoryID(int bloodBankID, int bloodGroupID) {
	    int inventoryID = 0;
	    try {
	    	Class.forName("com.mysql.cj.jdbc.Driver");
	    	Connection connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
	    	String sql = "SELECT inventory_id FROM blood_inventory WHERE blood_bank_id = ? AND blood_group_id = ?";
		     
			PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
					
	          statement.setInt(1, bloodBankID);
	        statement.setInt(2, bloodGroupID);
	        
	        // Execute the query
	        ResultSet resultSet = statement.executeQuery();
	        
	        // Check if a result is found and retrieve the inventory ID
	        if (resultSet.next()) {
	            inventoryID = resultSet.getInt("inventory_id");
	        }
	        
	        // Close the resources
	        resultSet.close();
	        statement.close();
	        connection.close();
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    return inventoryID;
	}
	
	public void updateBloodInventory(int inventoryID, int availableUnits, Date lastUpdatedDate) {
	    try {
	    	Class.forName("com.mysql.cj.jdbc.Driver");
	    	Connection connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
	        // Prepare the SQL statement
	        String sql = "UPDATE blood_inventory SET available_units = ?, last_updated_date = ? WHERE inventory_id = ?";
	        PreparedStatement statement = connection.prepareStatement(sql);
	        statement.setInt(1, availableUnits);
	        statement.setDate(2, new java.sql.Date(lastUpdatedDate.getTime()));
	        statement.setInt(3, inventoryID);
	        
	        // Execute the update
	        int rowsAffected = statement.executeUpdate();
	        
	        // Check if the update was successful
	        if (rowsAffected > 0) {
	            System.out.println("Blood Inventory updated successfully.");
	        } else {
	            System.out.println("Failed to update Blood Inventory.");
	        }
	        
	        // Close the resources
	        statement.close();
	        connection.close();
	    } catch (SQLException | ClassNotFoundException e) {
	        e.printStackTrace();
	    }
	}


    public boolean addInventory(BloodInventory inventory) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        boolean success = false;
        
        try {
            conn = getConnection(); // Retrieve your database connection
            
            // Prepare the SQL statement
            String sql = "INSERT INTO blood_inventory (bank_id, group_id, available_units, last_updated_date, storage_location, expiry_date) " +
                         "VALUES (?, ?, ?, ?, ?, ?)";
            stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            
            // Set the parameter values
            stmt.setInt(1, inventory.getBankId());
            stmt.setInt(2, inventory.getGroupId());
            stmt.setInt(3, inventory.getAvailableUnits());
            stmt.setDate(4, Date.valueOf(inventory.getLastUpdatedDate()));
            stmt.setString(5, inventory.getStorageLocation());
            stmt.setDate(6, Date.valueOf(inventory.getExpiryDate()));
            
            // Execute the SQL statement
            int affectedRows = stmt.executeUpdate();
            
            // Check if the insertion was successful
            if (affectedRows > 0) {
                rs = stmt.getGeneratedKeys();
                if (rs.next()) {
                    int inventoryId = rs.getInt(1);
                    inventory.setInventoryId(inventoryId);
                    success = true;
                }
            }
            stmt.close();
	        conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } 
        
        return success;
    }
    
    public static Connection getConnection() throws SQLException {
        Connection conn = null;
        try {
            // Load the MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            // Create the database connection
            conn = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return conn;
    }
    

}
